{"version":3,"sources":["images/logo_min.png","components/header/Header.tsx","images/venues/artworks_min.jpg","images/venues/batch_winery_min.jpg","images/venues/rangihoua_min.jpg","components/map/map.tsx","components/venues/Venues.tsx","images/gfg_banner.jpg","components/emailsignup/EmailSignup.tsx","components/landingpage/LandingPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","src","logo","alt","DEFAULT_MAP_CENTER","lat","lng","LocationPin","text","icon","locationIcon","Map","locations","bootstrapURLKeys","key","process","language","defaultCenter","defaultZoom","map","l","title","VENUES","address","websiteURL","image","rangihouaImage","artworksImage","batchImage","Venues","v","VenueCard","props","href","CustomForm","email","name","status","message","onValidated","ref","node","type","placeholder","onClick","EmailSignup","url","render","subscribe","formData","LandingPage","bannerImage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.076f28d4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo_min.9bf4cb93.png\";","import { Link } from 'react-router-dom'\n\nimport logo from '../../images/logo_min.png'\n\nimport \"./header.scss\"\n\nexport const Header = () => {\n    return (\n        <div className=\"section-header\">\n            <div>\n                <Link to=\"/\">\n                    <img src={logo} alt=\"Logo\"/>\n                </Link>\n            </div>\n\n            <div className=\"festival-heading\">\n                <h1 className=\"festival-title\">\n                    <span>Waiheke </span>\n                    <span className=\"title-jazz\">Jazz </span>\n                    <span>Festival</span>\n                </h1>\n                <h2  className=\"festival-dates\">\n                Easter 2022 April 15 - 18\n                </h2>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Header","export default __webpack_public_path__ + \"static/media/artworks_min.2032dc55.jpg\";","export default __webpack_public_path__ + \"static/media/batch_winery_min.801d08be.jpg\";","export default __webpack_public_path__ + \"static/media/rangihoua_min.bb8391a5.jpg\";","// @ts-nocheck\n\nimport GoogleMapReact from 'google-map-react'\nimport { Icon } from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/map-marker'\n\nimport './map.scss'\n\nconst DEFAULT_MAP_ZOOM = 12\n\n// defaults to Ostend, Waiheke Island coordinates\nconst DEFAULT_MAP_CENTER = {\n    lat: -36.78952842336488,\n    lng: 175.0503238476899\n}\n\n// from .env file\nconst GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GMAPS_API_KEY\n\nconst LocationPin = ( { text } ) => (\n    <div className=\"pin\">\n      <Icon icon={locationIcon} className=\"pin-icon\" />\n      <p className=\"pin-text\">{text}</p>\n    </div>\n  )\n\nexport const Map = ( { locations } ) => {\n    return (\n    <div className=\"map\">\n        <div className=\"google-map\">\n        <GoogleMapReact\n            bootstrapURLKeys={\n                {\n                    key: GOOGLE_MAPS_API_KEY,\n                    language: 'en'\n                }\n            }\n            defaultCenter={DEFAULT_MAP_CENTER}\n            defaultZoom={DEFAULT_MAP_ZOOM}\n        >\n\n            {locations.map((l) => (\n                <LocationPin\n                    lat={l.lat}\n                    lng={l.lng}\n                    text={l.title}\n                />\n            ))}\n\n\n        </GoogleMapReact>\n        </div>\n    </div>\n    )\n}\n\nexport default Map\n","import artworksImage from '../../images/venues/artworks_min.jpg'\nimport batchImage from '../../images/venues/batch_winery_min.jpg'\nimport rangihouaImage from '../../images/venues/rangihoua_min.jpg'\n\nimport { Map } from '../map/map'\n\nimport './venues.scss'\n\nconst VENUES: VenueCardProps[] = [\n    {\n        title: \"Rangihoua Estate\",\n        address: \"1 Gordons Road, Rocky Bay, Waiheke Island\",\n        websiteURL: \"https://www.rangihoua.co.nz/\",\n        image: rangihouaImage,\n        lat: -36.809456983048655,\n        lng: 175.06157178425767\n    },\n    {\n        title: \"Artworks Theatre\",\n        address: \"2 Korora Road, Oneroa, Waiheke Island\",\n        websiteURL: \"https://artworkstheatre.org.nz/\",\n        image: artworksImage,\n        lat: -36.78072446027415,\n        lng: 175.00682649561233\n    },\n    {\n        title: \"Batch Winery\",\n        address: \"129 Carsons Road, Waiheke Island\",\n        websiteURL: \"https://batchwinery.com/\",\n        image: batchImage,\n        lat: -36.813864540050616,\n        lng: 175.08318\n    }\n]\n\ninterface VenueCardProps {\n    title: string\n    address: string\n    websiteURL: string\n    image: any\n    lat?: number\n    lng?: number\n}\n\nexport const Venues = () => {\n    return (\n        <div className=\"section-venues\">\n            <h1>Venues</h1>\n\n            {VENUES.map((v) => (\n                <VenueCard \n                    title={v.title}\n                    address={v.address}\n                    websiteURL={v.websiteURL}\n                    image={v.image}\n                />\n            ))}\n\n            <Map\n                locations={VENUES}\n            />\n\n        </div>\n    )\n}\n\nconst VenueCard = (props: VenueCardProps) => {\n    return (\n        <div className=\"venue-card\">\n            <img className=\"venue-card-img\" src={props.image} alt={props.title}/>\n\n            <div className=\"venue-card-info\">\n                <h3 className=\"venue-card-title\">{props.title}</h3>\n                <p className=\"venue-card-address\">{props.address}</p>\n                <a href={props.websiteURL}>{props.websiteURL}</a>\n            </div>\n        </div>\n    )\n}\n\nexport default Venues","export default __webpack_public_path__ + \"static/media/gfg_banner.8bdcf531.jpg\";","import MailchimpSubscribe from \"react-mailchimp-subscribe\"\n\nimport \"./emailsignup.scss\"\n\n// from .env file\nconst MAILCHIMP_SUBSCRIBE_URL = process.env.REACT_APP_MAILCHIMP_URL\n\nconst CustomForm = ({ status, message, onValidated }) => {\n    let email, name;\n    const submit = () =>\n        email &&\n        name &&\n        email.value.indexOf(\"@\") > -1 &&\n        onValidated({\n            EMAIL: email.value,\n            NAME: name.value\n    })\n  \n    return (\n        <div className=\"email-signup-form\">\n            <p>\n                Sign up to the Waiheke Jazz Festival mailing list to get the latest updates by email\n            </p>\n\n            <input\n                ref={node => (email = node)}\n                type=\"email\"\n                placeholder=\"Your email\"\n            />\n            <button className=\"subscribe-button\" onClick={submit}>Subscribe</button>\n      </div>\n    )\n}\n\nexport const EmailSignup = () => {\n    return (\n        <div className=\"section-email-signup\">\n            <MailchimpSubscribe\n                url={MAILCHIMP_SUBSCRIBE_URL}\n                render={({ subscribe, status, message }) => (\n                    <CustomForm\n                        status={status}\n                        message={message}\n                        onValidated={formData => subscribe(formData)}\n                    />\n                )}\n            />\n      </div>\n    )\n}\n\nexport default EmailSignup","import bannerImage from '../../images/gfg_banner.jpg'\n\nimport { EmailSignup } from '../emailsignup/EmailSignup'\n\nimport './landingpage.scss'\n\nexport const LandingPage = () => {\n    return (\n        <div className=\"section-landing-page\">\n\n            <div className=\"landing-page-info\">\n\n                <p className=\"thankyou-text\">\n                    The festival will return Easter 2022. Thanks to everyone who attended in 2021. \n                </p>\n\n                <EmailSignup />\n\n            </div>\n\n            <div className=\"banner-image-container\">\n                <img src={bannerImage} alt=\"Good Friday Groove Banner\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default LandingPage","import './App.scss';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { Header } from \"./components/header/Header\"\nimport { Venues } from \"./components/venues/Venues\"\nimport { LandingPage } from './components/landingpage/LandingPage';\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Header/>\n\n                <Switch>\n                    <Route exact path=\"/\" component={LandingPage}/>\n                    <Route path=\"/venues\" component={Venues}/>\n                    <Route path=\"/\" component={LandingPage}/>\n                </Switch>\n            </BrowserRouter>\n\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}